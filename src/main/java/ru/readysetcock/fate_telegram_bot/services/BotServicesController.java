package ru.readysetcock.fate_telegram_bot.services;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.readysetcock.fate_telegram_bot.messages.BotApiMethodFactory;
import ru.readysetcock.fate_telegram_bot.messages.Response;
import ru.readysetcock.fate_telegram_bot.services.commands.BotCommandProcessor;
import ru.readysetcock.fate_telegram_bot.services.domain.UserService;
import ru.readysetcock.fate_telegram_bot.services.functions.BotFunctionProcessor;

import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;


/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–µ—Ä–≤–∏—Å—ã.
 */
@Service
@Slf4j
public class BotServicesController {
    private final UserService userService;
    private final UserStateController userStateController;
    private final Map<String, BotCommandProcessor> commandProcessorsMap;
    private final Map<String, BotFunctionProcessor> functionProcessorsMap;

    public BotServicesController(List<BotCommandProcessor> commandProcessors, List<BotFunctionProcessor> functionProcessors, UserService userService, UserStateController userStateController) {
        commandProcessorsMap = commandProcessors.stream()
                .collect(Collectors.toMap(processor -> processor.getCommand().getCommandText(), Function.identity()));
        functionProcessorsMap = functionProcessors.stream()
                .collect(Collectors.toMap(processor -> processor.getFunction().getFunctionName(), Function.identity()));
        this.userService = userService;
        this.userStateController = userStateController;
    }

    public Response getResponse(Update update) {
        Message message = update.getMessage();
        try {
            return switch (UpdateType.getType(update, userService)) {
                case STATE -> userStateController.processWithState(update);
                case COMMAND -> processWithCommand(message);
                case CALLBACK_QUERY -> processWithCallbackQuery(update.getCallbackQuery());
                case MESSAGE -> {
                    log.warn("–ù–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - {}", message.getText());
                    yield createDefaultMessage(message.getChatId());
                }
                case NO_MESSAGE_NO_QUERY -> {
                    log.warn("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ message –∏ callback - {}", update);
                    yield new Response();
                }
            };
        } catch (Exception e) {
            log.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - {}", e,e);
            return createServerErrorMessage(update.getMessage().getChatId());
        }
    }

    private Response processWithCommand(Message message) {
        String command = message.getText();
        BotCommandProcessor processor = commandProcessorsMap.get(command);
        if (processor != null) {
            log.info("–ü–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É '{}', –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ {}", command, processor.getClass().getSimpleName());
            return processor.process(message);
        } else {
            log.warn("–ü–æ–ª—É—á–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É '{}'", command);
            return createUnknownCommandMessage(message.getChatId());
        }
    }

    private Response processWithCallbackQuery(CallbackQuery query) {
        String data = query.getData();
        String functionName = data.split("/")[0];
        BotFunctionProcessor processor = functionProcessorsMap.get(functionName);
        if (processor != null) {
            log.info("–ü–æ–ª—É—á–∏–ª callback '{}', –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ {}", data, processor.getClass().getSimpleName());
            return processor.process(query);
        } else {
            log.warn("–ü–æ–ª—É—á–∏–ª callback –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ '{}'", data);
            return createNotImplementedCallbackQueryAnswer(query.getId());
        }
    }

    private Response createUnknownCommandMessage(Long chatId) {
        return new Response(BotApiMethodFactory.textMessage(chatId, "–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ \uD83E\uDD28"));
    }

    private Response createNotImplementedCallbackQueryAnswer(String queryId) {
        return new Response(BotApiMethodFactory.callbackQueryAnswer(queryId, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", false));
    }

    private Response createDefaultMessage(Long chatId) {
        return new Response(BotApiMethodFactory.textMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"));
    }

    private Response createServerErrorMessage(Long chatId) {
        return new Response(BotApiMethodFactory.textMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò£"));
    }
}